import os
from moxygen.src import parser as doxyparser
from moxygen.src import templates
from moxygen.src import helpers

class Moxygen:
    def __init__(self):
        self.defaultOptions = {
            'directory': None,
            'output': 'api.md',
            'groups': False,
            'noindex': False,
            'anchors': True,
            'language': 'cpp',
            'templates': 'templates',
            'pages': False,
            'classes': False,
            'output_s': 'api_%s.md',
            'logfile': 'moxygen.log',
            'filters': {
                'members': [
                    'define',
                    'enum',
                    # 'enumvalue',
                    'func',
                    # 'variable',
                    'property',
                    'public-attrib',
                    'public-func',
                    'protected-attrib',
                    'protected-func',
                    'signal',
                    'public-slot',
                    'protected-slot',
                    'public-type',
                    'private-attrib',
                    'private-func',
                    'private-slot',
                    'public-static-func',
                    'private-static-func',
                ],
                'compounds': [
                    'namespace',
                    'class',
                    'struct',
                    'union',
                    'typedef',
                    'interface',
                    # 'file',
                ]
            },
        }

    def run(self, options):
        # Sanitize options
        if 'output' not in options:
            if options.get('classes') or options.get('groups'):
                options['output'] = self.defaultOptions['output_s']
            else:
                options['output'] = self.defaultOptions['output']

        if (options.get('classes') or options.get('groups')) and '%s' not in options['output']:
            raise ValueError("The `output` file parameter must contain an '%s' for group or class name " +
                             "substitution when `groups` or `classes` are enabled.")

        if 'templates' not in options:
            options['templates'] = os.path.join(os.path.dirname(os.path.abspath(__file__)), self.defaultOptions['templates'], options.get('language', 'cpp'))

        # Load templates
        templates.registerHelpers(options)
        templates.load(options['templates'])

        # Parse files
        def loadIndexCallback(err, root):
            if err:
                raise err
            # Output groups
            if options.get('groups'):
                groups = root.toArray('compounds', 'group')
                if not groups:
                    raise ValueError("You have enabled `groups` output, but no groups were " +
                                     "located in your doxygen XML files.")

                for group in groups:
                    group.filterChildren(options['filters'], group.id)
                    compounds = group.toFilteredArray('compounds')
                    compounds.insert(0, group)  # insert group at top
                    helpers.writeCompound(group, templates.renderArray(compounds), doxyparser.references, options)
            elif options.get('classes'):
                rootCompounds = root.toArray('compounds', 'namespace')
                if not rootCompounds:
                    raise ValueError("You have enabled `classes` output, but no classes were " +
                                     "located in your doxygen XML files.")
                for comp in rootCompounds:
                    comp.filterChildren(options['filters'])
                    compounds = comp.toFilteredArray()
                    helpers.writeCompound(comp, [templates.render(comp)], doxyparser.references, options)
                    for e in compounds:
                        e.filterChildren(options['filters'])
                        helpers.writeCompound(e, [templates.render(e)], doxyparser.references, options)
            # Output single file
            else:
                root.filterChildren(options['filters'])
                compounds = root.toFilteredArray('compounds')
                if not options.get('noindex'):
                    compounds.insert(0, root)  # insert root at top if index is enabled
                contents = templates.renderArray(compounds)
                contents.append('Generated by [Moxygen](https://sourcey.com/moxygen)')
                helpers.writeCompound(root, contents, doxyparser.references, options)

            if options.get('pages'):
                pages = root.toArray('compounds', 'page')
                if not pages:
                    raise ValueError("You have enabled `pages` output, but no pages were " +
                                     "located in your doxygen XML files.")
                for page in pages:
                    compounds = page.toFilteredArray('compounds')
                    compounds.insert(0, page)
                    helpers.writeCompound(page, templates.renderArray(compounds), doxyparser.references, options)

        doxyparser.loadIndex(options, loadIndexCallback)

moxygen = Moxygen()
